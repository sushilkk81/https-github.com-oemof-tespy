import numpy as np

A=np.array([[1,-1],
            [-1,1]])
b=np.array([2,2])
print([b])
print(np.append(A,b,1))
print(np.linalg.matrix_rank(A))
print(np.linalg.matrix_rank(A,b))
print(np.linalg.solve(A,b))

"""
# HEAT PUMP JERRY
  #P_ext   P_bus  P_comp  Z_dros 21t    21m    21ch   22t    22m    22ch    23t    23m    23ch   24t    24m    24ch   cct    ccm    ccch   11t     11m    11ch   12t   12m    12ch    13t    13m    13ch   14t    14m     14ch
# bus: C_ext vorgeben, C_bus=C_comp, C_ext=C_bus
   [[ 1.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     1.    -1.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 1.    -1.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
# Kompressor KP: Komponentenbilanz, c_ch_in=c_ch_aus, delta c_t = delta c_m
    [ 0.     0.     1.     0.333  0.     0.     0.     0.333  0.333  0.333  -0.333 -0.333 -0.333  1.     1.     1.    -1.    -1.    -1.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     1.     0.     0.    -1.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.    -0.     0.     0.     0.    -0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
# Gask√ºhler GK: Komponentenbilanz, 5 aux
    [ 0.     0.     0.     0.333  1.     1.     1.    -0.667 -0.667 -0.667  -0.333 -0.333 -0.333  0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     1.     1.     1.    -1.    -1.     -1.   ]
    [ 0.     0.     0.     0.     0.     0.     0.    -0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.    -0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.    -0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     1.     0.     0.    -1.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     1.     0.     0.     -1.   ]
# sources
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     1.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     1.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     1.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     1.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      1.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     1.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
# Verdampfer VD: Komponentenbilanz, 5 aux
    [ 0.     0.     0.     0.333  0.     0.     0.     0.333  0.333  0.333   0.667  0.667  0.667 -1.    -1.    -1.     0.     0.     0.     1.      1.     1.    -1.    -1.    -1.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.    -0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.    -0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.    -0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     1.     0.     0.    -1.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     1.     0.     0.    -1.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
# Kreislaufzusammenschluss KR: C_in = C_out
    [ 0.     0.     0.     0.    -1.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     1.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.    -1.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     1.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.    -1.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     1.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
# Drossel DR: c_in=c_out, Z_drossel festlegen
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     -0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.    -0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.    -1.     0.     0.     0.     0.     0.     1.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]
    [ 0.     0.     0.     1.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.     0.     0.     0.     0.     0.     0.     0.     0.     0.      0.   ]]


A=np.array([[1,-1,1/3,-1/3,1,0,0,0,0,1/3],
           [0,1,-1+1/3,-1/3,0,1,-1,0,0,1/3],
           [-1,0,1/3,1-1/3,0,0,0,1,-1,1/3],
           [0,0,0,0,0,0,0,0,0,1],
           [0,0,1/8,-1/7,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,1/8,-1/7,0],
           [0,1/10,-1/8,0,0,0,0,0,0,0],
           [0,0,0,0,1,0,0,0,0,0],
           [0,0,0,0,0,1,0,0,0,0],
           [0,0,0,0,0,0,0,1,0,0]])
b=np.array([-3,-4,-7,5,0,0,0,12,14,15])

print(np.linalg.solve(A,b))

b=np.array((10,20))
b = np.append(b, np.zeros(3)) if 'b' in locals() else np.array(0)
print(b)

a = np.zeros((1,7))

A = np.vstack([A, a]) if 'A' in locals() else a  # if A exists, add line a, otherwise A=a
A = np.vstack([A, a]) if 'A' in locals() else a  # if A exists, add line a, otherwise A=a

b = np.ones((2,7))
A = np.concatenate((a,b))
print(A)

b=[1,2]
c=[3,4]
for a in b + c:
    print(a)

Ex_C_col = { }
Ex_C_col["therm"] = 3

print(Ex_C_col)

print(type("therm"))



# don't delete: still important!
A=np.array([[2,1]])
b=np.array([2])
print(A)
print(b)
print(np.linalg.lstsq(A,b)[0])      # for overdetermined matrix use lstsq instead of solve

types = {"therm": 0, "mech": 1, "chemical": 2}
aux_eqs=[[2, "therm"],[3, "mech"],[1, "chemical"]]
aux_eq = aux_eqs[0]
print(types[aux_eq[1]])

a=[0,0,0,1,0]
print(np.any(a))
"""